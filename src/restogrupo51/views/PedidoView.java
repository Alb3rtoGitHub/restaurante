/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package restogrupo51.views;

import java.awt.Color;
import java.awt.Component;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.sql.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import restogrupo51.accesoAdatos.MesaData;
import restogrupo51.accesoAdatos.PedidoData;
import restogrupo51.accesoAdatos.PedidoProductoData;
import restogrupo51.accesoAdatos.ProductoData;
import restogrupo51.entidades.Mesa;
import restogrupo51.entidades.Pedido;
import restogrupo51.entidades.PedidoProducto;
import restogrupo51.entidades.Producto;

/**
 *
 * @author Nico
 */
public class PedidoView extends javax.swing.JInternalFrame {

    private DefaultTableModel modelo = new DefaultTableModel() {

        @Override
        public boolean isCellEditable(int f, int c) {
            return false;
        }
    };

    private DefaultTableModel modelo2 = new DefaultTableModel() {

        @Override
        public boolean isCellEditable(int f, int c) {
            return false;
        }
    };

    MesaData mesa = new MesaData();
    PedidoData pedido = new PedidoData();
    ProductoData producto = new ProductoData();
    PedidoProductoData pp = new PedidoProductoData();
    Mesa objetoMesa; //Deberia ser pasado por parametro por el constructor;

    /**
     * Creates new form PedidoViews
     */
    public PedidoView(Mesa mesa) {
        initComponents();
        //Arma ambos modelos de tabla
        armarCabecera();
        armarCabecera2();
        //Rellena campos de la Mesa
        objetoMesa = mesa;
        llenarCampos(objetoMesa);
        //Carga la lista de TablaPedido
        ListaDeMesa();
        //Carga el MenuProductos
        cargarLista();
        //Mantiene botones +, - y modificarCantidad desactivados
        mas.setEnabled(false);
        menos.setEnabled(false);
        ModificarCantidad.setEnabled(false);
        NO.setSelected(true);
        //Coloca color a los cabezales de las tablas
        getContentPane().setBackground(new Color(255, 205, 110));
        JTableHeader header = TablaPedido.getTableHeader();
        JTableHeader header2 = TablaProducto.getTableHeader();
        header.setDefaultRenderer(new CustomHeaderRenderer());
        header2.setDefaultRenderer(new CustomHeaderRenderer());
        //Define el tamaño de las columnas de la tablaPedido
        TablaPedido.getColumnModel().getColumn(0).setPreferredWidth(15);
        TablaPedido.getColumnModel().getColumn(1).setPreferredWidth(40);
        TablaPedido.getColumnModel().getColumn(2).setPreferredWidth(55);
        TablaPedido.getColumnModel().getColumn(3).setPreferredWidth(130);
        TablaPedido.getColumnModel().getColumn(4).setPreferredWidth(70);
        TablaPedido.getColumnModel().getColumn(5).setPreferredWidth(50);
        //Define el tamaño de algunas columnas de la tablaProducto
        TablaProducto.getColumnModel().getColumn(0).setPreferredWidth(20);
        TablaProducto.getColumnModel().getColumn(1).setPreferredWidth(110);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablaPedido = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        TablaProducto = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        LabelID = new javax.swing.JLabel();
        CampoID = new javax.swing.JTextField();
        LabelMesa = new javax.swing.JLabel();
        CampoNumeroMesa = new javax.swing.JTextField();
        Limpiar = new javax.swing.JButton();
        LabelMesero = new javax.swing.JLabel();
        CampoMesero = new javax.swing.JTextField();
        LabelFecha = new javax.swing.JLabel();
        CampoFechaHora = new com.toedter.calendar.JDateChooser();
        LabelCobrada = new javax.swing.JLabel();
        NO = new javax.swing.JRadioButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        MenuProductos = new javax.swing.JList<>();
        registrar = new javax.swing.JButton();
        Modificar = new javax.swing.JButton();
        LogoPedido = new javax.swing.JLabel();
        contador = new javax.swing.JTextField();
        mas = new javax.swing.JButton();
        menos = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        total = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        ModificarCantidad = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        LockLabel3 = new javax.swing.JLabel();
        Lockcapacidad = new javax.swing.JTextField();
        LockLabel4 = new javax.swing.JLabel();
        Lockdisponibilidad = new javax.swing.JTextField();
        LockLabel2 = new javax.swing.JLabel();
        Locknumero = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        Eliminar = new javax.swing.JButton();
        Cobrar = new javax.swing.JButton();

        setClosable(true);
        setTitle("Pedidos");

        TablaPedido.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TablaPedido.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaPedidoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TablaPedido);

        TablaProducto.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        TablaProducto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaProductoMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(TablaProducto);

        jPanel1.setBackground(new java.awt.Color(255, 205, 110));
        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel6.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel6.setText("REGISTRO PEDIDO");

        LabelID.setText("ID");

        CampoID.setEditable(false);

        LabelMesa.setText("Mesa");

        CampoNumeroMesa.setEditable(false);

        Limpiar.setBackground(new java.awt.Color(255, 205, 110));
        Limpiar.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        Limpiar.setText("Limpiar");
        Limpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LimpiarActionPerformed(evt);
            }
        });

        LabelMesero.setText("Mesero");

        LabelFecha.setText("Fecha");

        CampoFechaHora.setDateFormatString("yyyy/MM/dd HH:mm:ss");

        LabelCobrada.setText("Cobrada");

        buttonGroup1.add(NO);
        NO.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        NO.setText("No");

        MenuProductos.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        jScrollPane3.setViewportView(MenuProductos);

        registrar.setBackground(new java.awt.Color(255, 205, 110));
        registrar.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        registrar.setText("Registrar");
        registrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registrarActionPerformed(evt);
            }
        });

        Modificar.setBackground(new java.awt.Color(255, 205, 110));
        Modificar.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        Modificar.setText("Modificar");
        Modificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModificarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LabelID)
                    .addComponent(LabelMesero)
                    .addComponent(LabelFecha)
                    .addComponent(LabelCobrada)
                    .addComponent(LabelMesa))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(CampoMesero, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(CampoFechaHora, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(12, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(CampoNumeroMesa, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(CampoID))
                                .addGap(18, 18, 18)
                                .addComponent(Limpiar)
                                .addGap(19, 19, 19))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(NO)
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addGap(92, 92, 92))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(registrar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Modificar)))
                .addGap(18, 18, 18))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelID)
                    .addComponent(CampoID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Limpiar))
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CampoNumeroMesa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LabelMesa))
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelMesero)
                    .addComponent(CampoMesero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(LabelFecha)
                    .addComponent(CampoFechaHora, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LabelCobrada)
                    .addComponent(NO))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(registrar)
                    .addComponent(Modificar))
                .addGap(28, 28, 28))
        );

        LogoPedido.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        LogoPedido.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LogoPedido.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/pedidosIcon.png"))); // NOI18N
        LogoPedido.setText("PEDIDOS");

        contador.setEditable(false);
        contador.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N

        mas.setText("+");
        mas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                masActionPerformed(evt);
            }
        });

        menos.setText("-");
        menos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menosActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/ticketIcon.png"))); // NOI18N
        jLabel1.setText("Importe");

        total.setFont(new java.awt.Font("SansSerif", 0, 24)); // NOI18N
        total.setText("0");

        jLabel3.setFont(new java.awt.Font("SansSerif", 0, 24)); // NOI18N
        jLabel3.setText("$");

        ModificarCantidad.setBackground(new java.awt.Color(255, 205, 110));
        ModificarCantidad.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        ModificarCantidad.setText("Modificar Cantidad");
        ModificarCantidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModificarCantidadActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/productIcon3.png"))); // NOI18N
        jLabel2.setText("PRODUCTOS");

        jPanel2.setBackground(new java.awt.Color(255, 205, 110));
        jPanel2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        LockLabel3.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        LockLabel3.setText("Capacidad");

        Lockcapacidad.setEditable(false);

        LockLabel4.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        LockLabel4.setText("Disponibilidad");

        Lockdisponibilidad.setEditable(false);

        LockLabel2.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        LockLabel2.setText("Numero");

        Locknumero.setEditable(false);

        jLabel4.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/mesitaIcon2.png"))); // NOI18N
        jLabel4.setText("MESA");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 13, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(57, 57, 57))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(LockLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(Lockcapacidad, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(LockLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Lockdisponibilidad, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(LockLabel2)
                        .addGap(72, 72, 72)
                        .addComponent(Locknumero, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Locknumero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LockLabel2)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LockLabel3)
                    .addComponent(Lockcapacidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Lockdisponibilidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LockLabel4))
                .addGap(13, 13, 13))
        );

        Eliminar.setBackground(new java.awt.Color(255, 205, 110));
        Eliminar.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        Eliminar.setText("¡Eliminar Pedido!");
        Eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarActionPerformed(evt);
            }
        });

        Cobrar.setBackground(new java.awt.Color(255, 205, 110));
        Cobrar.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        Cobrar.setText("Cobrar");
        Cobrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CobrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(LogoPedido, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 485, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(Eliminar))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(98, 98, 98)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(total)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(44, 44, 44)
                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                                .addGap(101, 101, 101)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ModificarCantidad)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(menos)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(contador, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(mas))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(Cobrar)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(95, 95, 95)))
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addComponent(LogoPedido, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(10, 10, 10)
                        .addComponent(Eliminar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(contador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(mas)
                                    .addComponent(menos))
                                .addGap(10, 10, 10)
                                .addComponent(ModificarCantidad))
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(total)
                            .addComponent(jLabel3)
                            .addComponent(Cobrar))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //Lista la tabla Pedido cuando sea necesaria..

    private void ListaDeMesa() {
        try {
            int id = objetoMesa.getIdMesa();
            String estado = "";
            borrarFilas();
            for (Pedido pedidoaux : pedido.listarPedidoPorMesa(id)) {
                if (!pedidoaux.isCobrada()) {
                    estado = "NO";
                    pp.calcularTotal(pedidoaux.getIdPedido());
                    modelo.addRow(new Object[]{pedidoaux.getIdPedido(), pedidoaux.getMesa().getNumeroMesa(), pedidoaux.getNombreMesero(), pedidoaux.getFechaHoraPedido(), pedidoaux.getImporte(), estado});
                }

            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, " " + ex.getMessage());
        }
    }

    //Registra un Pedido debe tener productos dentro.
    private void registrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registrarActionPerformed

        try {
            if ("".equalsIgnoreCase(CampoID.getText())) {
                int NumeroMesa = Integer.parseInt(CampoNumeroMesa.getText());
                Mesa item = mesa.buscarMesaPorNumero(NumeroMesa);
                String mese = CampoMesero.getText();
                LocalDateTime fechaHora = CampoFechaHora.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime();
                double imp = 0;
                boolean estado = false;

                if (item != null) {
                    Pedido aux = new Pedido(item, mese, fechaHora, imp, estado);

                    if (!MenuProductos.isSelectionEmpty()) {

                        pedido.registrarPedido(aux);
                        objetoMesa = mesa.buscarMesaPorId(objetoMesa.getIdMesa());
                        if (objetoMesa.isDisponibilidad()) {
                            Lockdisponibilidad.setText("Libre");
                        } else {
                            Lockdisponibilidad.setText("Ocupada");
                        }

                        if (!objetoMesa.isDisponibilidad()) {
                            for (Producto productos : MenuProductos.getSelectedValuesList()) {
                                String cantSTR = JOptionPane.showInputDialog("Ingrese una cantidad para el producto: " + productos.getNombreProducto());
                                int cant = Integer.parseInt(cantSTR);
                                PedidoProducto PedidoProductoNuevo = new PedidoProducto(aux, productos, cant);
                                pp.agregarPedidoProducto(PedidoProductoNuevo);
                            }
                            
                            MenuProductos.clearSelection();
                            pp.calcularTotal(aux.getIdPedido());
                            ListaDeMesa();
                        }

                    } else {
                        JOptionPane.showMessageDialog(this, "Error al querer crear pedido, No hay seleccionado ningun producto!");
                    }

                }

            } else {
                JOptionPane.showMessageDialog(this, "Este pedido ya existe, usted debe usar el boton de modificacion...");
            }

        } catch (NullPointerException A) {
            JOptionPane.showMessageDialog(this, "Falta completar campos");
        } catch (NumberFormatException B) {

        }

    }//GEN-LAST:event_registrarActionPerformed
    //Rellena la segunda tabla (TablaProducto) con datos del pedido seleccionado.
    private void TablaPedidoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaPedidoMouseClicked
        try {
            if (TablaPedido.getSelectedRow() > -1) {
                borrarFilas2();
                int idped = (Integer) TablaPedido.getValueAt(TablaPedido.getSelectedRow(), 0);
                for (PedidoProducto pedprod : pp.obtenerPPXPedido(idped)) {
                    double precio = pp.calcularSubtotal(pedprod.getIdPedidoProducto());
                    modelo2.addRow(new Object[]{pedprod.getIdPedidoProducto(), pedprod.getProducto().getNombreProducto(), pedprod.getProducto().getPrecio(), pedprod.getCantidad(), precio});
                }
                mas.setEnabled(false);
                menos.setEnabled(false);
                ModificarCantidad.setEnabled(false);
                double monto = pp.calcularTotal(idped);
                total.setText(String.valueOf(monto));

                Pedido nuevo = pedido.buscarPedido(idped);

                if (nuevo.isCobrada()) {
                    total.setText(String.valueOf("Cobrado"));
                }

                String id = nuevo.getIdPedido() + "";
                CampoID.setText(id);
                String mesero = nuevo.getNombreMesero();
                CampoMesero.setText(mesero);
                if (nuevo.isCobrada()) {
                    NO.setSelected(true);
                }

            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error " + ex.getMessage());
        }
    }//GEN-LAST:event_TablaPedidoMouseClicked
    //Rellena el contenido del contador para modificar la cantidad.
    private void TablaProductoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaProductoMouseClicked
        if (TablaProducto.getSelectedRow() > -1) {
            String numero = TablaProducto.getValueAt(TablaProducto.getSelectedRow(), 3).toString();
            contador.setText(numero);
            mas.setEnabled(true);
            menos.setEnabled(true);
            ModificarCantidad.setEnabled(true);
        }
    }//GEN-LAST:event_TablaProductoMouseClicked
    //Suma 1 a cantidad
    private void masActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_masActionPerformed
        int aumento = Integer.parseInt(contador.getText());
        if (aumento < 9) {
            aumento++;
            contador.setText(String.valueOf(aumento));
        } else {
            JOptionPane.showMessageDialog(this, "No se puede agregar mas de 9 platos del mismo!");
        }
    }//GEN-LAST:event_masActionPerformed
    //Resta 1 a cantidad y si la cantidad pasa a 0 puede ser eliminado el producto.
    private void menosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menosActionPerformed
        int restado = Integer.parseInt(contador.getText());
        if (restado >= 1) {
            restado--;
            contador.setText(String.valueOf(restado));
        }

        if (restado == 0) {
            restado--;
            int opcion = JOptionPane.showConfirmDialog(null, "El producto estara en 0 entoces ¿Desea eliminar el producto del pedido?", "Confirmar Eliminacion", JOptionPane.YES_NO_OPTION);
            if (opcion == JOptionPane.YES_OPTION) {
                String idSTR = TablaProducto.getValueAt(TablaProducto.getSelectedRow(), 0).toString();
                int id = Integer.parseInt(idSTR);
                pp.eliminarPedidoConProducto(id);
                borrarFilas2();
                String auxSTR = TablaPedido.getValueAt(TablaPedido.getSelectedRow(), 0).toString();
                int aux = Integer.parseInt(auxSTR);
                pp.calcularTotal(pedido.buscarPedido(aux).getIdPedido());
                ListaDeMesa();
                mas.setEnabled(false);
                menos.setEnabled(false);
                ModificarCantidad.setEnabled(false);
            } else {
                JOptionPane.showMessageDialog(this, "No se ha eliminado, entonces habra el minimo de ese plato (1)");
                String numero = 1 + "";
                contador.setText(numero);
            }
        }

    }//GEN-LAST:event_menosActionPerformed
    //Al presionar hace la modificacion de la cantidad en el pedido.
    private void ModificarCantidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModificarCantidadActionPerformed
        try {
            String idSTR = TablaProducto.getValueAt(TablaProducto.getSelectedRow(), 0).toString();
            int id = Integer.parseInt(idSTR);
            PedidoProducto pedpro = pp.buscarPedidoConProducto(id);
            int cambio = Integer.parseInt(contador.getText());
            pedpro.setCantidad(cambio);
            pp.modificarPedidoConProducto(pedpro);

            borrarFilas2();
            int idped = (Integer) TablaPedido.getValueAt(TablaPedido.getSelectedRow(), 0);
            for (PedidoProducto pedprod : pp.obtenerPPXPedido(idped)) {
                double precio = pp.calcularSubtotal(pedprod.getIdPedidoProducto());
                modelo2.addRow(new Object[]{pedprod.getIdPedidoProducto(), pedprod.getProducto().getNombreProducto(), pedprod.getProducto().getPrecio(), pedprod.getCantidad(), precio});
            }
            mas.setEnabled(false);
            menos.setEnabled(false);
            double monto = pp.calcularTotal(idped);
            total.setText(String.valueOf(monto));
            ListaDeMesa();
            borrarFilas2();
            ModificarCantidad.setEnabled(false);
        } catch (ArrayIndexOutOfBoundsException ex) {
            JOptionPane.showMessageDialog(this, "Debe seleccionar uno de los productos que aparecen debajo...");
        }
    }//GEN-LAST:event_ModificarCantidadActionPerformed
    //Limpia campos de la parte de registro de Pedido.
    private void LimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LimpiarActionPerformed
        CampoID.setText("");
        CampoMesero.setText("");
        CampoFechaHora.setDate(null);
        NO.setSelected(true);
        //buttonGroup1.clearSelection();
    }//GEN-LAST:event_LimpiarActionPerformed
    //Se usa para modificar datos del pedido y tambien productos.
    private void ModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModificarActionPerformed
        try {
            int id = Integer.parseInt(CampoID.getText());
            int mesaNumero = Integer.parseInt(CampoNumeroMesa.getText());
            Mesa mes = mesa.buscarMesaPorNumero(mesaNumero);
            String nombre = CampoMesero.getText();
            LocalDateTime fechaHora = CampoFechaHora.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime();
            boolean estado = false;

            Pedido ped = new Pedido(id, mes, nombre, fechaHora, 0, estado);
            pedido.modificarPedido(ped);

            if (!MenuProductos.isSelectionEmpty()) {
                boolean existente = false;
                for (Producto productos : MenuProductos.getSelectedValuesList()) {
                    for (PedidoProducto pedidosproduc : pp.obtenerPPXPedido(id)) {

                        if (pedidosproduc.getProducto().getCodigoProducto().equals(productos.getCodigoProducto())) {
                            existente = true;
                            break;
                        }
                    }

                    if (existente) {
                        JOptionPane.showMessageDialog(this, "No se puede agregar el mismo producto o si desea más, modifique la cantidad.");
                        existente = false;
                    } else {
                        String cantSTR = JOptionPane.showInputDialog("Ingrese una cantidad para el producto: " + productos.getNombreProducto());
                        int cant = Integer.parseInt(cantSTR);
                        PedidoProducto PedidoProductoNuevo = new PedidoProducto(ped, productos, cant);
                        pp.agregarPedidoProducto(PedidoProductoNuevo);
                        borrarFilas2();
                        ModificarCantidad.setEnabled(false);
                    }
                }

            }
            MenuProductos.clearSelection();
            pp.calcularTotal(ped.getIdPedido());
            ListaDeMesa();
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Error al llenar campos, verifique que este seleccionado un ID para modificar!");
        }
    }//GEN-LAST:event_ModificarActionPerformed
    //Elimina un pedido
    private void EliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarActionPerformed
        if (TablaPedido.getSelectedRow() > -1) {
            int idped = (Integer) TablaPedido.getValueAt(TablaPedido.getSelectedRow(), 0);
            pedido.eliminarPedido(idped);
            total.setText(String.valueOf(0 + ""));
            ListaDeMesa();
            borrarFilas2();
            
            if (TablaPedido.getRowCount() == 0) {
                objetoMesa.setDisponibilidad(true);
                mesa.modificarMesa(objetoMesa);
                Lockdisponibilidad.setText("Libre");
            }
            
        } else {
            JOptionPane.showMessageDialog(this, "Debe seleccionar un pedido de la tabla para eliminar!");
        }

    }//GEN-LAST:event_EliminarActionPerformed
    //Realiza la cobranza de un pedido
    private void CobrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CobrarActionPerformed
        int idped = (Integer) TablaPedido.getValueAt(TablaPedido.getSelectedRow(), 0);
        Pedido nuevo = pedido.buscarPedido(idped);
        boolean todosCobrados = true;
        if (nuevo.isCobrada()) {
            JOptionPane.showMessageDialog(this, "Este pedido se encuentra cobrado!");
        } else {
            nuevo.setCobrada(true);
            pedido.modificarPedido(nuevo);
            
            for (Pedido aux : pedido.listarPedidoPorMesa(objetoMesa.getIdMesa())) {
                if (!aux.isCobrada()) {
                    todosCobrados = false;
                    break;
                }
            }

            if (todosCobrados) {
                objetoMesa.setDisponibilidad(true);
                mesa.modificarMesa(objetoMesa);
                Lockdisponibilidad.setText("Libre");
            }
        }
        
        total.setText(0 + "");
        borrarFilas2();
        ListaDeMesa();
    }//GEN-LAST:event_CobrarActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser CampoFechaHora;
    private javax.swing.JTextField CampoID;
    private javax.swing.JTextField CampoMesero;
    private javax.swing.JTextField CampoNumeroMesa;
    private javax.swing.JButton Cobrar;
    private javax.swing.JButton Eliminar;
    private javax.swing.JLabel LabelCobrada;
    private javax.swing.JLabel LabelFecha;
    private javax.swing.JLabel LabelID;
    private javax.swing.JLabel LabelMesa;
    private javax.swing.JLabel LabelMesero;
    private javax.swing.JButton Limpiar;
    private javax.swing.JLabel LockLabel2;
    private javax.swing.JLabel LockLabel3;
    private javax.swing.JLabel LockLabel4;
    private javax.swing.JTextField Lockcapacidad;
    private javax.swing.JTextField Lockdisponibilidad;
    private javax.swing.JTextField Locknumero;
    private javax.swing.JLabel LogoPedido;
    private javax.swing.JList<Producto> MenuProductos;
    private javax.swing.JButton Modificar;
    private javax.swing.JButton ModificarCantidad;
    private javax.swing.JRadioButton NO;
    private javax.swing.JTable TablaPedido;
    private javax.swing.JTable TablaProducto;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JTextField contador;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton mas;
    private javax.swing.JButton menos;
    private javax.swing.JButton registrar;
    private javax.swing.JLabel total;
    // End of variables declaration//GEN-END:variables
    //Cabecera de Tabla Pedido
    private void armarCabecera() {
        modelo.addColumn("#");
        modelo.addColumn("Mesa");
        modelo.addColumn("Mesero");
        modelo.addColumn("Fecha Y Hora");
        modelo.addColumn("Importe");
        modelo.addColumn("Cobrado");
        TablaPedido.setModel(modelo);
    }

    //Cabecera de Tabla Producto
    private void armarCabecera2() {
        modelo2.addColumn("#");
        modelo2.addColumn("Producto");
        modelo2.addColumn("Precio Unit");
        modelo2.addColumn("Cantidad");
        modelo2.addColumn("Subtotal");
        TablaProducto.setModel(modelo2);
    }

    //Borra Tabla Pedido
    private void borrarFilas() {
        int f = TablaPedido.getRowCount() - 1; //me permite saber la cantidad de filas que tiene la tabla
        for (; f >= 0; f--) { //f comienza en la cantidad de filas de mi tabla (lo tengo en la linea anterior)
            modelo.removeRow(f);
        }
    }

    //Borra Tabla Producto
    private void borrarFilas2() {
        int f = TablaProducto.getRowCount() - 1; //me permite saber la cantidad de filas que tiene la tabla
        for (; f >= 0; f--) { //f comienza en la cantidad de filas de mi tabla (lo tengo en la linea anterior)
            modelo2.removeRow(f);
        }
    }

    //Rellena campos de la mesa
    private void llenarCampos(Mesa mesa) {

        //String id2 = mesa.getIdMesa() + "";
        //Lockid.setText(id2);
        String numero = mesa.getNumeroMesa() + "";
        Locknumero.setText(numero);
        String cap = mesa.getCapacidad() + "";
        Lockcapacidad.setText(cap);
        if (mesa.isDisponibilidad() == true) {
            Lockdisponibilidad.setText("Libre");
        } else {
            Lockdisponibilidad.setText("Ocupada");
        }
        CampoNumeroMesa.setText(mesa.getNumeroMesa() + "");
        NO.setSelected(true);
        CampoFechaHora.setDate(Date.from(Instant.now()));
    }

    //Carga Menu Productos
    private void cargarLista() {
        List<Producto> lista = producto.listarProductos();
        Producto[] arreglo = lista.toArray(new Producto[0]);
        MenuProductos.setListData(arreglo);
    }

    //Pintado de cabecera de tabla.
    class CustomHeaderRenderer extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

            // Cambiar el color de fondo de la cabecera de columna
            c.setBackground(new java.awt.Color(255, 205, 110)); // Cambia este color según tus preferencias

            return c;
        }
    }
}
